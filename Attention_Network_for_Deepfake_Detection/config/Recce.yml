# config/Recce.yml
model:
  name: Recce
  num_classes: 2

config:
  # ------------- optimization ----------------
  optimizer:
    name: adam
    lr: 0.0002
    weight_decay: 0.00001

  # Adaptive LR using validation plateau of the monitored metric
  scheduler:
    name: ReduceLROnPlateau
    mode: max                  # because we monitor frame-level AUC/Acc
    factor: 0.5
    patience: 3
    threshold: 0.001
    threshold_mode: abs
    min_lr: 1.0e-7

  # ------------- monitoring (FRAME-based) ----
  # Drives LR and early-stop. Video metrics are only logged.
  monitor: frame_auc           # choices: frame_auc | frame_acc | val_loss

  # ------------- run control -----------------
  epochs: 100                  # ceiling; early-stop will likely end earlier
  resume: True                 # set False to start fresh
  resume_best: False           # resume from save_dir/best_model.pt if it exists
  extra_epochs: 100            # when resuming from best, allow up to +100 more epochs
  resume_path: "./checkpoints_celebclean_k120/step_52849_model.pt"
  # Early stop on smoothed, FRAME-based metric
  early_stop:
    mode: max                  # (use 'min' if monitor=val_loss)
    patience: 10
    min_delta: 0.001
    smooth_k: 3
    min_epochs: 25             # don't stop before this many epochs

  # ------------- stability toggles ----------
  allow_tf32: True
  channels_last: True
  compile_model: True
  fused_adamw: False
  cudnn_benchmark: True
  use_ema_eval: True
  deterministic_val: True
  seed: 42

  # ------------- I/O & misc -----------------
  save_dir: "./checkpoints_celebclean_k120"
  log_dir: "./runs/celebclean_k120_tb"
  debug: False
  device: "cuda:0"
  log_steps: 200
  id: CelebClean_k120_run1
  ckpt: ""                     # leave empty => loader will auto-pick best_model.pt

data:
  name: CelebDF
  file: "config/dataset/CelebDF.yml"   # must contain train_cfg / val_cfg / test_cfg
  train_batch_size: 25
  val_batch_size: 25
  test_batch_size: 25
  num_workers: 4
  pin_memory: True
  persistent_workers: True
  prefetch_factor: 4
  train_branch: "train_cfg"
  val_branch: "val_cfg"
  test_branch: "test_cfg"
